apply plugin: 'org.jetbrains.kotlin.jvm'
apply plugin: 'org.jetbrains.kotlin.kapt'
apply plugin: 'org.jetbrains.dokka'
apply plugin: 'com.vanniktech.maven.publish'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

def artifactType = Attribute.of('artifactType', String)

configurations {
  unzip {
    attributes.attribute(artifactType, ArtifactTypeDefinition.DIRECTORY_TYPE)
  }
}

dependencies {
  registerTransform(org.gradle.api.internal.artifacts.transform.UnzipTransform) {
    from.attribute(artifactType, ArtifactTypeDefinition.JAR_TYPE)
    to.attribute(artifactType, ArtifactTypeDefinition.DIRECTORY_TYPE)
  }
}

dependencies {
  api deps.layoutlib.native.jdk11
  api deps.tools.common
  api deps.tools.layoutlib
  api deps.tools.sdkcommon
  api deps.kxml2
  api deps.junit
  api deps.androidx.annotations
  api deps.guava
  api deps.kotlinx.coroutines.core
  api deps.okio
  implementation deps.moshi.core
  implementation deps.moshi.adapters
  kapt deps.moshi.kotlinCodegen
  implementation deps.jcodec.core
  implementation deps.jcodec.javase
  implementation project(':paparazzi-agent')

  def osName = System.getProperty("os.name").toLowerCase(Locale.US)
  if (osName.startsWith("mac")) {
    unzip deps.layoutlib.native.macOsX
  } else if (osName.startsWith("windows")) {
    unzip deps.layoutlib.native.windows
  } else {
    unzip deps.layoutlib.native.linux
  }

  testImplementation deps.assertj
}

tasks.named("dokkaGfm").configure {
  outputDirectory = rootProject.file("docs/0.x")

  dokkaSourceSets.named("main") {
    configureEach {
      reportUndocumented = false
      skipDeprecated = true
      jdkVersion = 8
      perPackageOption {
        prefix = "app.cash.paparazzi.internal"
        suppress = true
      }
    }
  }
}

def generateTestConfig = tasks.register("generateTestConfig") {
  def resources = "$buildDir/intermediates/paparazzi/resources.txt"
  outputs.file(resources)

  doLast {
    File configFile = new File(resources)
    configFile.withWriter('utf-8') { writer ->
      writer.writeLine("app.cash.paparazzi")
      writer.writeLine(".")
      writer.writeLine("29")
      writer.writeLine("platforms/android-29/")
      writer.writeLine(".")
      writer.writeLine(configurations.unzip.singleFile.path)
    }
  }
}

tasks.withType(Test).configureEach {
  dependsOn(generateTestConfig)
  systemProperty(
      "paparazzi.test.resources",
      generateTestConfig.map { it.outputs.files.singleFile }.get().path
  )
//  jvmArgs '-Xcheck:jni'
  testLogging {
    events 'passed', 'failed', 'skipped', 'standardOut', 'standardError'
    exceptionFormat 'FULL'
    showCauses true
    showExceptions true
    showStackTraces true
    showStandardStreams true
  }
}